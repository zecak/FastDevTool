<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PWMIS.Core.Extensions</name>
    </assembly>
    <members>
        <member name="T:PWMIS.Core.Extensions.EntityQueryExecuteEventArgs">
            <summary>
            实体查询增删改执行事件参数类
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.EntityQueryExecuteEventArgs.Entity">
            <summary>
            操作的实体类
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.EntityQueryExecuteEventArgs.ExecuteType">
            <summary>
            执行类型
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.EntityQueryExecuteEventArgs.Success">
            <summary>
            执行是否成功
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.EntityQueryExecuteEventArgs.#ctor(PWMIS.DataMap.Entity.EntityBase,PWMIS.Core.Extensions.EntityQueryExecuteType)">
            <summary>
            使用实体类和查询类型初始化本类
            </summary>
            <param name="entity"></param>
            <param name="executeType"></param>
        </member>
        <member name="T:PWMIS.Core.Extensions.EntityQueryExecuteType">
            <summary>
            实体查询类型
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.EntityQueryExecuteType.Select">
            <summary>
            仅查询
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.EntityQueryExecuteType.Insert">
            <summary>
            插入
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.EntityQueryExecuteType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.EntityQueryExecuteType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.DbContext">
            <summary>
            数据上下文，可以实现自动检查数据库，创建表，获取EntityQuery 泛型实例对象等功能，封装了AdoHelper的使用。
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.DbContext.DBFilePath">
            <summary>
            数据库文件，对于文件型数据库需要设置该字段，并且在CheckDB 实现类里面做适当的处理
            </summary>
        </member>
        <member name="E:PWMIS.Core.Extensions.DbContext.OnBeforeExecute">
            <summary>
            执行增删改操作前的事件
            </summary>
        </member>
        <member name="E:PWMIS.Core.Extensions.DbContext.OnAfterExecute">
            <summary>
            执行增删改操作之后的事件
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.#ctor(System.String)">
            <summary>
            初始化数据访问上下文,程序会自动寻找合适的数据上下文提供程序
            </summary>
            <param name="connName">在应用程序配置文件的数据库连接配置的连接名称</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.#ctor(System.String,PWMIS.Core.Interface.IDbContextProvider)">
            <summary>
            使用数据库连接配置名字和数据上下文提供程序,初始化数据访问上下文
            </summary>
            <param name="connName">数据库连接配置名字</param>
            <param name="contextProvider">数据上下文提供程序</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.#ctor(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            以一个数据访问对象初始化数据上下文
            </summary>
            <param name="db">数据访问对象</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.GetContextKey(System.String)">
            <summary>
            根据连接名称或者连接字符串，结合当前实例类型名称，生成检查数据库的Key
            </summary>
            <remarks>同一个DbContext类型可能使用不同的连接初始化，原因是不同的库可能有相同的表；
            同样，不同的DbConext对象也可能使用相同的连接字符串，比如某个DbContext 初始化了一个数据库的部分表清单
            </remarks>
            <param name="connNameOrString">连接名称或者连接字符串</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.Core.Extensions.DbContext.CurrentDataBase">
            <summary>
            关联的当期数据库访问对象
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.CheckTableExists``1">
            <summary>
            在数据库中检查指定的实体类映射的数据表是否存在，如果不存在，将创建表
            </summary>
            <typeparam name="T">实体类类型</typeparam>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.InitializeTable``1(System.String)">
            <summary>
            检查实体类对应的表是否存在，如果不存在则创建表并执行可选的SQL语句，比如为表增加索引等。
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="initSql">要初始化执行的SQL语句，为空则忽略，支持{0} 占位符，者将会用表名称替换。</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.ResolveAllEntitys">
            <summary>
            解析出所有检验过表存在的实体类（当前类注册的实体类）
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.CheckTableExistsOf``1">
            <summary>
            在数据库中检查指定的接口类型映射的数据表是否存在，如果不存在，将创建表
            </summary>
            <typeparam name="T">实体类接口类型</typeparam>
        </member>
        <member name="P:PWMIS.Core.Extensions.DbContext.DbContextProvider">
            <summary>
            获取数据上下文提供程序
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.CheckDB">
            <summary>
            检查数据库和相关的表是否已经初始化。如果是Access 数据库，还会检查数据库文件是否存在。
            如果需要更多的检查，可以重写该方法，但一定在方法第一行保留 base.CheckDB();这行代码。
            </summary>
            <returns>检查是否通过</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.CheckAllTableExists">
            <summary>
            检查所有的表是否存在，需要在子类里面实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.NewQuery``1">
            <summary>
            创建一个新的EntityQuery泛型类实例对象
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.QueryObject``1(PWMIS.DataMap.Entity.OQL)">
            <summary>
            查询一个实体类对象
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">查询表达式</param>
            <returns>实体类</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.QueryList``1(PWMIS.DataMap.Entity.OQL)">
            <summary>
            查询实体类列表
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL查询表达式</param>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.QueryAllList``1">
            <summary>
            查询指定实体类类型的全部数据
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Transaction``1(``0,System.Action{``0},System.String@)">
            <summary>
            开启事务执行上下文，程序会自动提交或者回滚事务。
            </summary>
            <typeparam name="T">数据上下文类型</typeparam>
            <param name="instance">实例对象</param>
            <param name="action">操作的方法</param>
            <param name="errorMessage">出错信息</param>
            <returns>事务是否执行成功</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Transaction(System.Action{PWMIS.Core.Extensions.DbContext},System.String@)">
            <summary>
            开启事务执行上下文，如果你的方法执行成功，自动提交事务，否则，回滚事务。
            <example>
            <![CDATA[
            string msg;
            User user=new User(){ /* init property value */ };
            Role role=new Role(){/* init property value */  };
            
            LocalContext localDb=new LocalContext("local");
            bool result= localDb.Transaction( c=>{
                                 c.Add(user);
                                 c.Add(role);
                                                  },out msg);
            ]]>
            </example>
            </summary>
            <param name="action">自定义的操作方法</param>
            <param name="errorMessage">出错信息</param>
            <returns>事务是否执行成功</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Add``1(``0)">
            <summary>
            增加一个数据到数据库中
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="data">要增加的数据</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Update``1(``0)">
            <summary>
            修改一个数据到数据库中
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="data">要修改的数据</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.Remove``1(``0)">
            <summary>
            从数据库中删除一个数据到，数据必须有主键
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="data">要删除的数据</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.AddList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加一个列表数据到数据库中
            </summary>
            <typeparam name="T">实体类或者接口</typeparam>
            <param name="list">数据列表</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.DbContext.InitContextProvider">
            <summary>
            初始化DbContextProvider ,如果是SqlServer,Oracle之外的数据库，需要按照约定，提供XXXDbContext
            <remarks>
              约定，根据 CurrentDataBase 所在的程序集，来确定 XXXDbContext 的位置
             XXXDbContext的名字，XXX总是CurrentDataBase的类型名字，(Name,not full Name)
             XXXDbContext 可以在不同的命名空间中
            </remarks>
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.EntityBaseExtension">
            <summary>
            EntityBase 扩展，由网友“吉林-stdbool”提供
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.EntityBaseExtension.GetParentEntity``1(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            通过子表实例获取所对应的父表实例 【**仅仅支持单一主键，不支持联合主键的情况**】
            </summary>
            <typeparam name="T">父表所对应的类</typeparam>
            <param name="entity"></param>
            <param name="db"></param>
            <returns>所对应的父表实例</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.EntityBaseExtension.GetParentEntity``1(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            通过子表实例获取所对应的父表实例 【**仅仅支持单一主键，不支持联合主键的情况**】
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.EntityBaseExtension.GetChildList``2(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            通过 父表实例 查找 查询关联的特定子实体类集合 【参照“医生”的QueryListWithChild函数，不足：ParentType应该可以通过 entity获取。。。】
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ParentType"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCast">
             <summary>
             属性转换类，将一个类的属性值转换给另外一个类的同名属性，注意该类使用的是浅表复制。
             <example>
             <code>
             <![CDATA[
                    //下面几种用法一样:
                    ModelCast.GetCast(typeof(CarInfo), typeof(ImplCarInfo)).Cast(info, ic);
                    ModelCast.CastObject<CarInfo, ImplCarInfo>(info, ic);
                    ModelCast.CastObject(info, ic);
            
                    ImplCarInfo icResult= info.CopyTo<ImplCarInfo>(null);
            
                    ImplCarInfo icResult2 = new ImplCarInfo();
                    info.CopyTo《ImplCarInfo》(icResult2);
             ]]>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.GetCast(System.Type,System.Type)">
            <summary>
            获取要转换的当前转换类实例
            </summary>
            <param name="sourceType">要转换的源类型</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.#ctor(System.Type,System.Type)">
            <summary>
            以两个要转换的类型作为构造函数，构造一个对应的转换类
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.Cast(System.Object,System.Object)">
            <summary>
            将源类型的属性值转换给目标类型同名的属性
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.Cast(System.Object,System.Object,System.String[])">
            <summary>
            将源类型的属性值转换给目标类型同名的属性，排除要过滤的属性名称
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="filter">要过滤的属性名称</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.CastObject``2(``0,``1)">
            <summary>
            转换对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCast.CastProperty">
            <summary>
            转换属性对象
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.CastProperty.SourceProperty">
            <summary>
            源属性
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.CastProperty.TargetProperty">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler">
            <summary>
            属性访问器
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            以一个属性对象初始化类
            </summary>
            <param name="propInfo">性对象</param>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.Getter">
            <summary>
            Get访问器
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ModelCast.PropertyAccessorHandler.Setter">
            <summary>
            Set访问器
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.ModelCastExtension">
            <summary>
            对象转换扩展（可安全的处理PDF.NET实体类之间的转换）
            <example>
            <code>
            <![CDATA[
              A a = new A() {  Name="aaa", NoCopyName="no.no.no."};
              var b = a.CopyTo<B>(filter: new string[] { "NoCopyName" });
            ]]>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCastExtension.CopyTo``1(System.Object,``0,System.String[])">
            <summary>
            将当前对象的属性值复制到目标对象，使用浅表复制
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象，如果为空，将生成一个</param>
            <param name="filter">要过滤的属性名称数组</param>
            <returns>复制过后的目标对象</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCastExtension.CopyTo``1(System.Object,``0)">
            <summary>
            拷贝当前对象的属性值到目标对象上
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="source">当前对象</param>
            <param name="target">目标对象</param>
            <returns>返回赋值过后的目标对象</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.ModelCastExtension.CopyTo``1(System.Object)">
            <summary>
            拷贝当前对象的属性值到目标对象上
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="source">当前对象</param>
            <returns>返回赋值过后的目标对象</returns>
        </member>
        <member name="T:PWMIS.Core.Extensions.OQLExtension">
            <summary>
            OQL扩展类
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToList``1(PWMIS.DataMap.Entity.OQL)">
            <summary>
            OQL 扩展，可以直接返回查询的列表
            <example>
            <code>
            <![CDATA[
            
              User user=new User();
              OQL q=OQL.From(user).Select(user.ID,user.Name).End;
              List<User> list = q.ToList<User>();
            
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            OQL 扩展，可以直接返回查询的列表
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <param name="db">数据访问对象</param>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToEntity``1(PWMIS.DataMap.Entity.OQL)">
            <summary>
            OQL 扩展，可以直接返回查询的实体类
            <example>
            <code>
            <![CDATA[
              User user=new User(){ID=100};
              OQL q=OQL.From(user).Select(user.ID,user.Name).Where(user.ID).End;
              User result = q.ToEntity<User>();
            ]]>
            </code>
            </example>
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <returns>实体类</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToEntity``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
             OQL 扩展，可以直接返回查询的实体类
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="q">OQL对象</param>
            <param name="db">数据访问对象</param>
            <returns>实体类</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToObjectList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,PWMIS.DataMap.Entity.ECResultFunc{``0})">
            <summary>
            直接返回实体类列表查询结果
            <example>
            <code>
            <![CDATA[
            AdoHelper dbHelper=new SqlServer(){ConnectionString="....."};
            var list= OQL.From(entity1)
                     .Join(entity2).On(entity1.PK,entity2.FK)
                     .Select(entity1.Field1,entity2.Field2)
                  .End
                  .ToObjectList(dbHelper, e =>
                     {
                        return new {
                                     Property1=e.GetItemValue<int>(0), 
                                     Property2=e.GetItemValue<string>(1) 
                                   };
                     });
            
            foreache(var item in list)
            {
                Console.WriteLine("Property1={0},Property2={1}",item.Property1,item.Property2);
            }
            ]]>
            </code>
            </example>
            </summary>
            <param name="q">OQL对象</param>
            <param name="db">数据访问对象</param>
            <param name="ecFun">结果对象映射委托</param>
            <typeparam name="TResult">结果元素类型</typeparam>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.ToObjectList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataMap.Entity.ECResultFunc{``0})">
            <summary>
            直接返回实体类列表查询结果
            <example>
            <code>
            <![CDATA[
            var list= OQL.From(entity1)
                     .Join(entity2).On(entity1.PK,entity2.FK)
                     .Select(entity1.Field1,entity2.Field2)
                  .End
                  .ToObjectList( e =>
                     {
                        return new MyViewModel{
                                     Property1=e.GetItemValue<int>(0), 
                                     Property2=e.GetItemValue<string>(1) 
                                   };
                     });
            
            foreache(MyViewModel item in list)
            {
                Console.WriteLine("Property1={0},Property2={1}",item.Property1,item.Property2);
            }
            ]]>
            </code>
            </example>
            </summary>
            <param name="q">OQL对象</param>
            <param name="ecFun">结果对象映射委托</param>
            <typeparam name="TResult">结果元素类型</typeparam>
            <returns>实体类列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.MapToList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataMap.Entity.ECMapFunc{``0})">
             <summary>
             将关联查询结果映射到POCO类型列表
             <example>
             <code>
             <![CDATA[
             OQL joinQ = OQL.From(bInfo)
               .Join(stock).On(bInfo.SerialNumber, stock.SerialNumber)
               .Select()
               .OrderBy(bInfo.SerialNumber, "asc").OrderBy(bInfo.GoodsName, "asc")
             .END;
            
             var resultList = joinQ.MapToList<GoodsSaleInfoVM>(() => new GoodsSaleInfoVM()
             {
                 GoodsName = bInfo.GoodsName,
                 Manufacturer = bInfo.Manufacturer,
                 SerialNumber = bInfo.SerialNumber,
                 GoodsPrice = stock.GoodsPrice,
                 MakeOnDate = stock.MakeOnDate,
                 CanUserMonth = bInfo.CanUserMonth,
                 Stocks = stock.Stocks,
                 GoodsID = stock.GoodsID,
                 ExpireDate = stock.MakeOnDate.AddMonths(bInfo.CanUserMonth)
             });
             ]]>
             </code>
             </example>
             </summary>
             <typeparam name="TResult">POCO类型</typeparam>
             <param name="q">实体类关联查询的OQL语句</param>
             <param name="fun">映射方法委托</param>
             <returns>POCO类型列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.MapToList``1(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,PWMIS.DataMap.Entity.ECMapFunc{``0})">
            <summary>
            将关联查询结果映射到POCO类型列表
            </summary>
            <typeparam name="TResult">POCO类型</typeparam>
            <param name="q">实体类关联查询的OQL语句</param>
            <param name="db">数据访问对象</param>
            <param name="fun">映射方法委托</param>
            <returns>POCO类型列表</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.Execute(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            执行OQL
            </summary>
            <param name="oql">OQL</param>
            <param name="db">数据访问对象</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.Execute(PWMIS.DataMap.Entity.OQL)">
            <summary>
            使用默认连接，执行OQL
            </summary>
            <param name="oql">OQL</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OQLExtension.FilterEnumValues(System.Type,System.Int32)">
            <summary>
            过滤枚举中包含指定值的组合方式值，比如在OQL中比较，要求使用的枚举类型的值是2的次方
            感谢网友 深圳-Panke 2014.11.11 提供
            <example>
            <![CDATA[
            OQL q=OQL.From(paper)
                     .Where(cmp=>cmp.Compare(paper.Color,"in",typeof(Colors).FilterEnumValues((int)Colors.Blue) ))
               .END;
            ]]>
            </example>
            </summary>
            <param name="enumType"></param>
            <param name="FilterContainValue">要筛选的枚举值</param>
            <returns>返回所有可能的枚举值组合</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.OracleDbContext.#ctor(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            用连接字符串名字初始化本类
            </summary>
            <param name="db">数据访问对象</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.OracleDbContext.CheckTableExists``1">
            <summary>
            检查实体类对应的数据表是否在数据库中存在
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.OracleDbContext.InitializeTable``1(System.String)">
            <summary>
            检查实体类对应的表是否存在，如果不存在则创建表并执行可选的SQL语句，比如为表增加索引等。
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="initSql">要初始化执行的SQL语句</param>
        </member>
        <member name="T:PWMIS.Core.Extensions.SqlServerDbContext">
            <summary>
            SqlServer 数据上下文基类，可以自动创建实体类对应的表
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.SqlServerDbContext.#ctor(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            用连接字符串名字初始化本类
            </summary>
            <param name="db">数据访问对象</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.SqlServerDbContext.CheckTableExists``1">
            <summary>
            检查实体类对应的数据表是否在数据库中存在
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.SqlServerDbContext.InitializeTable``1(System.String)">
            <summary>
            检查实体类对应的表是否存在，如果不存在则创建表并执行可选的SQL语句，比如为表增加索引等。
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="initSql">要初始化执行的SQL语句</param>
        </member>
        <member name="T:PWMIS.Core.Extensions.ReplicationStatus">
            <summary>
            复制状态
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.ReplicationStatus.UnKnown">
            <summary>
            未知状态
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.ReplicationStatus.LogExists">
            <summary>
            日志已经存在
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.ReplicationStatus.Succeed">
            <summary>
            复制成功
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.ReplicationStatus.Error">
            <summary>
            复制过程发生错误，请查看错误信息
            </summary>
        </member>
        <member name="F:PWMIS.Core.Extensions.ReplicationStatus.Executed">
            <summary>
            已经执行过了，不会再执行复制
            </summary>
        </member>
        <member name="T:PWMIS.Core.Extensions.ReadLogEventArgs">
            <summary>
            日志阅读事件参数
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ReadLogEventArgs.AllCount">
            <summary>
            日志记录总数
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ReadLogEventArgs.ReadCount">
            <summary>
            当前已经读取并处理的日志记录数
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ReadLogEventArgs.ReadData">
            <summary>
            已经读取的数据
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ReadLogEventArgs.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{PWMIS.Core.MyCommandLogEntity})">
            <summary>
            以日志记录综合和阅读数初始化本类
            </summary>
            <param name="allCount"></param>
            <param name="readCount"></param>
            <param name="data">读取的数据</param>
        </member>
        <member name="T:PWMIS.Core.Extensions.ReplicationEventArgs">
            <summary>
            复制操作发生后的事件参数
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ReplicationEventArgs.Log">
            <summary>
            当前日志对象
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.ReplicationEventArgs.AffectedCount">
            <summary>
            受影响的记录数。如果执行某个事务日志的复制并没有引发相应的影响记录数可能是有问题的，
            可以在事件中处理，或者抛出异常停止复制过程
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.ReplicationEventArgs.#ctor(PWMIS.Core.MyCommandLogEntity,System.Int32)">
            <summary>
            以一个日志对象初始化本类
            </summary>
            <param name="log"></param>
            <param name="affected"></param>
        </member>
        <member name="T:PWMIS.Core.Extensions.TransLogDbContext">
            <summary>
            管理事务日志的数据访问上下文对象
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.TransLogDbContext.ErrorMessage">
            <summary>
            操作过程中的错误信息
            </summary>
        </member>
        <member name="P:PWMIS.Core.Extensions.TransLogDbContext.CurrentStatus">
            <summary>
            当前操作的复制状态
            </summary>
        </member>
        <member name="E:PWMIS.Core.Extensions.TransLogDbContext.OnReadLog">
            <summary>
            读取日志并且处理前的时候
            </summary>
        </member>
        <member name="E:PWMIS.Core.Extensions.TransLogDbContext.AfterReplications">
            <summary>
            复制数据，提交事务之前
            </summary>
        </member>
        <member name="M:PWMIS.Core.Extensions.TransLogDbContext.#ctor(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            以一个数据上下文对象初始化本类
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:PWMIS.Core.Extensions.TransLogDbContext.#ctor(System.String)">
            <summary>
            以连接字符串名字来初始化本类
            </summary>
            <param name="connName">应用程序配置文件中的连接字符串名字</param>
        </member>
        <member name="M:PWMIS.Core.Extensions.TransLogDbContext.ReadLog(System.Int32,System.Func{System.Collections.Generic.List{PWMIS.Core.MyCommandLogEntity},System.Boolean},System.String)">
            <summary>
            按照顺序读取事务日志并进行处理
            </summary>
            <param name="pageSize">每次要读取的日志页大小</param>
            <param name="func">处理日志的自定义方法，如果返回假则不再继续读取处理</param>
            <param name="partLogName">分部的日志消息表名字,可以为空</param>
            <returns>返回已经读取的记录数量</returns>
        </member>
        <member name="M:PWMIS.Core.Extensions.TransLogDbContext.DataReplication(PWMIS.Core.MyCommandLogEntity)">
            <summary>
            将制定的数据复制到当前数据访问对象关联的数据库中
            </summary>
            <param name="log">事务日志实体</param>
            <returns>如果数据已经存在或者复制成功，返回真；如果遇到错误，返回假</returns>
        </member>
    </members>
</doc>
